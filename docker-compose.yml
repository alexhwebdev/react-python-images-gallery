services:
  frontend:
    restart: always
    build: ./frontend
    ports:
      - '3000:3000'
    volumes:
      - /app/node_modules
      - ./frontend:/app
    environment: 
      - CHOKIDAR_USEPOLLING=true
  api:
    restart: always
    build: ./api
    ports:
      - '5050:5050'
    volumes:
      - ./api:/app
  mongo:
    image: mongo
    restart: always
    ports:
      - "27017:27017"  # Exposing port 27017 to localhost
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: very-strong-db-password
    volumes:
      - mongodb_data:/data/db
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: very-strong-db-password
    depends_on:
      - mongo

volumes:
  mongodb_data:



# --------------------  COMMANDS
# run docker compose file to run DB
# cd db --> 
#     > docker compose up

# Run it in background, detached mode :
#     > docker compose up -d

# Force Image rebuild if code changes and new Image needs to be built
#     > docker compose up --build

# For custom Images, if you just wanna build Images w/o starting a Container after
#     > docker compose build

# Deletes all Containers, default Network, shuts down everythng. Does NOT delete Volumes
#     > docker compose down

# Delete data Volumes -->
#     > docker compose down -v


# --------------------  ACCESS MONGO SHELL
# docker exec -it react-python-images-gallery-mongo-1 mongosh --username root --password very-strong-db-password